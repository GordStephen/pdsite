#! /usr/bin/env bash

script_path=$(readlink -f $0)
themes_path=${script_path%/*}/../themes
default_config=${script_path%/*}/../.pdsite.yml.default

function print_help() {
	echo "`basename $0` - Simple static site generator, written in BASH, using pandoc."
	echo
	echo "Usage:"
	echo "   `basename $0` command"
	echo
	echo "Commands:"
	echo "   init	 initializes a new pdsite project in the current directory"
	echo "   build	builds the static site in the current directory"
	echo "   serve	serves the static site in the current directory on a local webserver"
}

# Checks whether a binary we depend on is available
function check_dep() {
	ret=0
	cmd_name="$1"
	cmd_use_case="$2"
	cmd_path=`which "$cmd_name"`
	if [ -z "$cmd_path" ]; then
		ret=1
		echo "Could not find dependency '$cmd_name', used ${cmd_use_case}." 1>&2
	fi
	return $ret
}

# Checks whether our dependencies are available
function check_deps() {
	ret=0
	check_dep pandoc "to convert '*.md' -> '*.html'" \
		; ret=$(($ret + $?))
	check_dep busybox "for local http hosting" \
		; ret=$(($ret + $?))
	[ $ret -gt 0 ] && exit $ret
	return $ret
}

function init() {
	if [ ! -e .pdsite.yml ]; then
		cp $default_config .pdsite.yml
	else
		echo "ERROR: .pdsite.yml is already present" 1>&2
		exit 1
	fi
}

# Define web-safe URL creation from file/directory names
function make_slug() {
	tr -dc '[:graph:][:space:]' \
		| tr '[:upper:]' '[:lower:]' \
		| tr -s ' -_'  \
		| tr ' _' '-'
}

# Define human-readable page title creation from web-safe filenames
function make_pretty() {
	tr '-' ' ' \
		| awk '{ for (i = 1; i <= NF; i++) { $i = toupper(substr($i, 1, 1)) substr($i, 2) }} 1'
}

function get_config_var() {
	var_name="$1"
	value=$(cat $config_file | grep '^'"$var_name"':' | sed 's|^'"$var_name"':\s*\(.*\)$|\1|')
	[ "$value" ] || {
		echo "ERROR: Missing config variable '$var_name' in .pdsite.yml" 1>&2
		exit 1
	}
	echo -n "$value"
}

# Generate global file structure for navigation templates
function navi() {
	echo -e '\n---'

	# Match nothing
	np_prev=""
	np_open=0
	while read -r np
	do
		# Close finished sub-folders
		while [[ "$np" != $np_prev* ]]
		do
			echo "]},"
			np_open=$(($np_open - 1))
			np_prev=$(dirname "$np_prev")
		done

		# Open parent folders without content
		while [[ "$np" != "$np_prev" ]] || [[ $np_open -eq 0 ]]
		do
			# Adding one path element
			# Generate path relative to site root
			path="${np_prev}$(echo ${np:${#np_prev}} | sed -e 's|\(.\)/.*|\1|')"

			# Generate pretty page name automatically
			name=$(echo "$path" | sed 's|.*/\(.*\)|\1|' | make_pretty)

			path_rtf="$(echo $path | sed -e 's/^\.//')"
			path_part=""
			[ -n "$path_rtf" ] && path_part='"path":"'$path_rtf'",'
			echo '{"type":"directory","name":"'$name'",'$path_part'"contents":['
			np_open=$(($np_open + 1))

			np_prev="$path"
		done
	done < <(find . -not -path "*/\.*" -name "$extension_glob" -type f | xargs dirname | sort | uniq)

	# Close remaining folders
	while [ $np_open -gt 0 ]
	do
		echo "]}"
		np_open=$(($np_open - 1))
	done

	echo -e '...\n'
}

function build() {

	# Load config variables from file
	if [ -f ./.pdsite.yml ]; then
		config_file=$(pwd)'/.pdsite.yml'
		theme=$(get_config_var 'theme')
		input_extension=$(get_config_var 'inputextension')
		output_folder=$(get_config_var 'outputfolder')
	else
		echo "ERROR: .pdsite.yml configuration file not found" 1>&2
		exit 1
	fi

	theme_path=$themes_path/$theme
	output_folder=$(readlink -f $output_folder)

	# Build glob expressions
	extension_glob='*'$input_extension
	index_file_glob='*index'$input_extension

	# Define temporary file locations
	global_tree=$output_folder/tree.yml.tmp
	local_tree=local_tree.yml.tmp
	local_block_template=$output_folder/localtemplate.yml.tmp
	local_block=local.yml.tmp
	config_block=$output_folder/config.yml.tmp

	# Set up output folder
	if [ -d $output_folder ]; then
		echo -n "Clearing old build folder..."
		rm -r $output_folder/*
	else
		echo -n "Creating new build folder..."
		mkdir $output_folder
	fi
	echo " done."

	echo -n "Building site..."

	echo -e "\n---" > $config_block
	cat $config_file >> $config_block
	echo -e "...\n" >> $config_block

	echo -e "\n---\npagenameintitle: y\npagename: _\n...\n" > $local_block_template

	# By default, match nothing
	out_exclude="XXX_XXX_XXX"
	# If the output folder is contained within the source folder, exclude it
	[[ "$output_folder" == `pwd`* ]] && out_exclude='.'${output_folder#"`pwd`"}

	# Generate base file structure
	find -not -path "*/\.*" -not -path "${out_exclude}*" -type d \
		| make_slug \
		| xargs -I path mkdir -p "$output_folder"/path
	find -not -path "*/\.*" -not -path "${out_exclude}*" -not -path "$index_file_glob" -path "$extension_glob" -type f \
		| sed 's|\(.*\)\..*|\1|' \
		| make_slug \
		| xargs -I path mkdir -p $output_folder/path

	# Copy in index files
	find -not -path "*/\.*" -not -path "${out_exclude}*" -path "$index_file_glob" -type f \
		| while read in_path
	do
		out_path=$(echo $in_path | make_slug)
		cp "$in_path" "$output_folder/$out_path"
	done

	# Copy in other content files
	find -not -path "*/\.*" -not -path "${out_exclude}*" -not -path "$index_file_glob" -path "$extension_glob" -type f \
		| while read in_path
	do
		out_path=$(echo $in_path | sed 's|\./\(.*\)\.\(.*\)|\1/index.\2|' | make_slug)
		cp "$in_path" "$output_folder"/"$out_path"
	done

	# Copy in other (non-written-content) files
	find -not -path "*/\.*" -not -path "${out_exclude}*" -not -path "$extension_glob" -type f -exec cp {} "$output_folder"/{} \;

	cd "$output_folder"

	navi > $global_tree

	# Generate local YAML
	find -path "$index_file_glob" -type f | while read line; do

		relpath=${line%/*}
		site_path_abs=$(echo $relpath | cut -c 2-)

		# Create local YAML block with auto-generated page name
		name=$(echo ${relpath##*/} | make_pretty)
		sed 's|^pagename: _$|pagename: '"$name"'|' $local_block_template > $relpath/$local_block

		# Create local YAML block with context-aware file tree data
		sed 's|"path":"'$site_path_abs'",|\0"active":y,|' $global_tree > $relpath/$local_tree

	done

	# Convert content files to context-aware HTML
	find -not -path "${output_folder}*" -path "$index_file_glob" -type f \
		-execdir pandoc --template $theme_path/template.html --toc -o index.html \
			{} $local_tree $local_block $config_block \; -delete

	# Clean up
	find -path "*.tmp" -type f -delete

	# Copy in theme assets
	cd "$theme_path"
	find -not -path "." -type d -exec mkdir -p "$output_folder"/{} \;
	find -not -path "./template.html" -type f -exec cp {} "$output_folder"/{} \;

	echo " done."
}

function serve() {
	build
	echo "Hosting with busybox on 'http://127.0.0.1:8080' (stop with Ctrl-C) ..."
	busybox httpd -f -p 127.0.0.1:8080 -h "$output_folder"
}

check_deps

set -e

case $1 in
	"init") init;;
	"build") build;;
	"serve") serve;;
	*)
		echo "Unknown command '$1'" 1>&2
		print_help
		exit 1
		;;
esac
