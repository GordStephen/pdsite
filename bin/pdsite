#! /usr/bin/env bash

scriptpath=$(readlink -f $0)
themespath=${scriptpath%/*}/../themes
defaultconfig=${scriptpath%/*}/../.pdsite.yml.default

function print_help() {
	echo "`basename $0` - Simple static site generator, written in BASH, using pandoc."
	echo
	echo "Usage:"
	echo "   `basename $0` command"
	echo
	echo "Commands:"
	echo "   init	 initializes a new pdsite project in the current directory"
	echo "   build	builds the static site in the current directory"
	echo "   serve	serves the static site in the current directory on a local webserver"
}

function init() {
	if [ ! -e .pdsite.yml ]; then
		cp $defaultconfig .pdsite.yml
	else
		echo "ERROR: .pdsite.yml is already present" 1>&2
		exit 1
	fi
}

function build() {

	# Load config variables from file
	if [ -f ./.pdsite.yml ]; then
		configfile=$(pwd)'/.pdsite.yml'
		theme=$(cat $configfile | grep '^theme:' | sed 's|^theme:\s*\(.*\)$|\1|')
		inputextension=$(cat $configfile | grep '^inputextension:' | sed 's|^inputextension:\s*\(.*\)$|\1|')
		outputfolder=$(cat $configfile | grep '^outputfolder:' | sed 's|^outputfolder:\s*\(.*\)$|\1|')
		[ "$theme" ] && [ "$inputextension" ] && [ "$outputfolder" ] || {
			echo "ERROR: Missing config variables in .pdsite.yml" 1>&2
			exit 1
		}
	else
		echo "ERROR: .pdsite.yml configuration file not detected" 1>&2
		exit 1
	fi

	themepath=$themespath/$theme
	outputfolder=$(readlink -f $outputfolder)

	# Build glob expressions
	extensionglob='*'$inputextension
	indexfileglob='*index'$inputextension

	# Define temporary file locations
	globaltree=$outputfolder/tree.yml.tmp
	localtree=localtree.yml.tmp
	localblocktemplate=$outputfolder/localtemplate.yml.tmp
	localblock=local.yml.tmp
	configblock=$outputfolder/config.yml.tmp

	# Define web-safe URL creation from file/directory names
	makeslug() {
		tr -dc '[:graph:][:space:]' | tr '[:upper:]' '[:lower:]' | tr -s ' -_'  | tr ' _' '-'
	}

	# Define human-readable page title creation from web-safe filenames
	makepretty() {
		tr '-' ' ' | awk '{ for (i = 1; i <= NF; i++) { $i = toupper(substr($i, 1, 1)) substr($i, 2) }} 1'
	}

	# Set up output folder
	if [ -d $outputfolder ]; then
		echo -n "Clearing old build folder..."
		rm -r $outputfolder/*
	else
		echo -n "Creating new build folder..."
		mkdir $outputfolder
	fi
	echo " done."

	echo -n "Building site..."

	echo -e "\n---" > $configblock
	cat $configfile >> $configblock
	echo -e "...\n" >> $configblock

	echo -e "\n---\npagenameintitle: y\npagename: _\n...\n" > $localblocktemplate

	# By default, match nothing
	out_exclude="XXX_XXX_XXX"
	# If the output folder is contained within the source folder, exclude it
	[[ "$outputfolder" == `pwd`* ]] && out_exclude='.'${outputfolder#"`pwd`"}

	# Generate base file structure
	find -not -path "*/\.*" -not -path "${out_exclude}*" -type d | makeslug | xargs -I path mkdir -p "$outputfolder"/path
	find -not -path "*/\.*" -not -path "${out_exclude}*" -not -path "$indexfileglob" -path "$extensionglob" -type f | sed 's|\(.*\)\..*|\1|' | makeslug | xargs -I path mkdir -p $outputfolder/path

	# Copy in index files
	find -not -path "*/\.*" -not -path "${out_exclude}*" -path "$indexfileglob" -type f | while read inpath; do
		outpath=$(echo $inpath | makeslug)
		cp "$inpath" "$outputfolder/$outpath"
	done

	# Copy in other content files
	find -not -path "*/\.*" -not -path "${out_exclude}*" -not -path "$indexfileglob" -path "$extensionglob" -type f | while read inpath; do
		outpath=$(echo $inpath | sed 's|\./\(.*\)\.\(.*\)|\1/index.\2|' | makeslug)
		cp "$inpath" "$outputfolder"/"$outpath"
	done

	# Copy in other (non-written-content) files
	find -not -path "*/\.*" -not -path "${out_exclude}*" -not -path "$extensionglob" -type f -exec cp {} "$outputfolder"/{} \;

	cd "$outputfolder"

	# Generate global file structure for navigation templates
	echo -e '\n---' > $globaltree
	tree -dfJ --noreport | cut -c 2- | while read line; do

		# Generate path relative to site root
		path=$(echo $line | grep 'type' | sed 's|.*"name":"\.\(.*\)","contents".*|\1|')

		# Generate pretty page name automatically
		name=$(echo $path | sed 's|.*/\(.*\)|\1|' | makepretty)

		# Inject page name and path into site tree
		echo $line | sed 's|"name":"\(.*\)","contents"|"name":"'"$name"'","path":"'"$path"'","contents"|'

	done >> $globaltree
	echo -e '...\n' >> $globaltree

	# Generate local YAML
	find -path "$indexfileglob" -type f | while read line; do

		relpath=${line%/*}
		siteabspath=$(echo $relpath | cut -c 2-)

		# Create local YAML block with auto-generated page name
		name=$(echo ${relpath##*/} | makepretty)
		sed 's|^pagename: _$|pagename: '"$name"'|' $localblocktemplate > $relpath/$localblock

		# Create local YAML block with context-aware file tree data
		sed 's|"path":"'$siteabspath'",|\0"active":y,|' $globaltree > $relpath/$localtree

	done

	# Convert content files to context-aware HTML
	find -not -path "${outputfolder}*" -path "$indexfileglob" -type f -execdir pandoc --template $themepath/template.html --toc -o index.html {} $localtree $localblock $configblock \; -delete

	# Clean up
	find -path "*.tmp" -type f -delete

	# Copy in theme assets
	cd "$themepath"
	find -not -path "." -type d -exec mkdir -p "$outputfolder"/{} \;
	find -not -path "./template.html" -type f -exec cp {} "$outputfolder"/{} \;

	echo " done."
}

function serve() {
	build
	echo "Hosting with busybox on 'http://127.0.0.1:8080' (stop with Ctrl-C) ..."
	busybox httpd -f -p 127.0.0.1:8080 -h "$outputfolder"
}

case $1 in
	"init") init;;
	"build") build;;
	"serve") serve;;
	*)
		echo "Unknown command '$1'" 1>&2
		print_help
		exit 1
		;;
esac
